import {
  require_leaflet_src
} from "./chunk-X2KS3JVV.js";
import {
  __toESM
} from "./chunk-HUBM7RA2.js";

// node_modules/leaflet-geosearch/dist/geosearch.module.js
var t = __toESM(require_leaflet_src());
var import_leaflet = __toESM(require_leaflet_src());
function u() {
  return (u = Object.assign || function(t2) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var r2 = arguments[e2];
      for (var n2 in r2)
        Object.prototype.hasOwnProperty.call(r2, n2) && (t2[n2] = r2[n2]);
    }
    return t2;
  }).apply(this, arguments);
}
function l(t2, e2) {
  t2.prototype = Object.create(e2.prototype), t2.prototype.constructor = t2, t2.__proto__ = e2;
}
function c(t2, e2) {
  return (c = Object.setPrototypeOf || function(t3, e3) {
    return t3.__proto__ = e3, t3;
  })(t2, e2);
}
function h() {
  if ("undefined" == typeof Reflect || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if ("function" == typeof Proxy)
    return true;
  try {
    return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
    })), true;
  } catch (t2) {
    return false;
  }
}
function p(t2, e2, r2) {
  return (p = h() ? Reflect.construct : function(t3, e3, r3) {
    var n2 = [null];
    n2.push.apply(n2, e3);
    var o2 = new (Function.bind.apply(t3, n2))();
    return r3 && c(o2, r3.prototype), o2;
  }).apply(null, arguments);
}
function f(t2, e2, r2, n2) {
  void 0 === e2 && (e2 = ""), void 0 === n2 && (n2 = {});
  var o2 = document.createElement(t2);
  return e2 && (o2.className = e2), Object.keys(n2).forEach(function(t3) {
    if ("function" == typeof n2[t3]) {
      var e3 = 0 === t3.indexOf("on") ? t3.substr(2).toLowerCase() : t3;
      o2.addEventListener(e3, n2[t3]);
    } else
      "html" === t3 ? o2.innerHTML = n2[t3] : "text" === t3 ? o2.innerText = n2[t3] : o2.setAttribute(t3, n2[t3]);
  }), r2 && r2.appendChild(o2), o2;
}
function d(t2) {
  t2.preventDefault(), t2.stopPropagation();
}
var m = function() {
  for (var t2 = arguments.length, e2 = new Array(t2), r2 = 0; r2 < t2; r2++)
    e2[r2] = arguments[r2];
  return e2.filter(Boolean).join(" ").trim();
};
function v(t2, e2) {
  t2 && t2.classList && (Array.isArray(e2) ? e2 : [e2]).forEach(function(e3) {
    t2.classList.contains(e3) || t2.classList.add(e3);
  });
}
function y(t2, e2) {
  t2 && t2.classList && (Array.isArray(e2) ? e2 : [e2]).forEach(function(e3) {
    t2.classList.contains(e3) && t2.classList.remove(e3);
  });
}
var g;
var b = 13;
var x = 40;
var E = 38;
var w = [b, 27, x, E, 37, 39];
var L = function() {
  function t2(t3) {
    var e3 = this, r2 = t3.handleSubmit, n2 = t3.searchLabel, o2 = t3.classNames, s2 = void 0 === o2 ? {} : o2;
    this.hasError = false, this.container = f("div", m("geosearch", s2.container)), this.form = f("form", ["", s2.form].join(" "), this.container, { autocomplete: "none", onClick: d, onDblClick: d, touchStart: d, touchEnd: d }), this.input = f("input", ["glass", s2.input].join(" "), this.form, { type: "text", placeholder: n2 || "search", onInput: this.onInput, onKeyUp: function(t4) {
      return e3.onKeyUp(t4);
    }, onKeyPress: function(t4) {
      return e3.onKeyPress(t4);
    }, onFocus: this.onFocus, onBlur: this.onBlur, onClick: function() {
      e3.input.focus(), e3.input.dispatchEvent(new Event("focus"));
    } }), this.handleSubmit = r2;
  }
  var e2 = t2.prototype;
  return e2.onFocus = function() {
    v(this.form, "active");
  }, e2.onBlur = function() {
    y(this.form, "active");
  }, e2.onSubmit = function(t3) {
    try {
      var e3 = this;
      return d(t3), y(r2 = e3.container, "error"), v(r2, "pending"), Promise.resolve(e3.handleSubmit({ query: e3.input.value })).then(function() {
        y(e3.container, "pending");
      });
    } catch (t4) {
      return Promise.reject(t4);
    }
    var r2;
  }, e2.onInput = function() {
    this.hasError && (y(this.container, "error"), this.hasError = false);
  }, e2.onKeyUp = function(t3) {
    27 === t3.keyCode && (y(this.container, ["pending", "active"]), this.input.value = "", document.body.focus(), document.body.blur());
  }, e2.onKeyPress = function(t3) {
    t3.keyCode === b && this.onSubmit(t3);
  }, e2.setQuery = function(t3) {
    this.input.value = t3;
  }, t2;
}();
var k = function() {
  function t2(t3) {
    var e3 = this, r2 = t3.handleClick, n2 = t3.classNames, o2 = void 0 === n2 ? {} : n2, s2 = t3.notFoundMessage;
    this.selected = -1, this.results = [], this.onClick = function(t4) {
      if ("function" == typeof e3.handleClick) {
        var r3 = t4.target;
        if (r3 && e3.container.contains(r3) && r3.hasAttribute("data-key")) {
          var n3 = Number(r3.getAttribute("data-key"));
          e3.clear(), e3.handleClick({ result: e3.results[n3] });
        }
      }
    }, this.handleClick = r2, this.notFoundMessage = s2 ? f("div", m(o2.notfound), void 0, { html: s2 }) : void 0, this.container = f("div", m("results", o2.resultlist)), this.container.addEventListener("click", this.onClick, true), this.resultItem = f("div", m(o2.item));
  }
  var e2 = t2.prototype;
  return e2.render = function(t3, e3) {
    var r2 = this;
    void 0 === t3 && (t3 = []), this.clear(), t3.forEach(function(t4, n2) {
      var o2 = r2.resultItem.cloneNode(true);
      o2.setAttribute("data-key", "" + n2), o2.innerHTML = e3({ result: t4 }), r2.container.appendChild(o2);
    }), t3.length > 0 ? (v(this.container.parentElement, "open"), v(this.container, "active")) : this.notFoundMessage && (this.container.appendChild(this.notFoundMessage), v(this.container.parentElement, "open")), this.results = t3;
  }, e2.select = function(t3) {
    return Array.from(this.container.children).forEach(function(e3, r2) {
      return r2 === t3 ? v(e3, "active") : y(e3, "active");
    }), this.selected = t3, this.results[t3];
  }, e2.count = function() {
    return this.results ? this.results.length : 0;
  }, e2.clear = function() {
    for (this.selected = -1; this.container.lastChild; )
      this.container.removeChild(this.container.lastChild);
    y(this.container.parentElement, "open"), y(this.container, "active");
  }, t2;
}();
var C = { position: "topleft", style: "button", showMarker: true, showPopup: false, popupFormat: function(t2) {
  return "" + t2.result.label;
}, resultFormat: function(t2) {
  return "" + t2.result.label;
}, marker: { icon: t && import_leaflet.Icon ? new import_leaflet.Icon.Default() : void 0, draggable: false }, maxMarkers: 1, maxSuggestions: 5, retainZoomLevel: false, animateZoom: true, searchLabel: "Enter address", notFoundMessage: "", messageHideDelay: 3e3, zoomLevel: 18, classNames: { container: "leaflet-bar leaflet-control leaflet-control-geosearch", button: "leaflet-bar-part leaflet-bar-part-single", resetButton: "reset", msgbox: "leaflet-bar message", form: "", input: "", resultlist: "", item: "", notfound: "leaflet-bar-notfound" }, autoComplete: true, autoCompleteDelay: 250, autoClose: false, keepResult: false, updateMap: true };
var U = "Leaflet must be loaded before instantiating the GeoSearch control";
var P = { options: u({}, C), classNames: u({}, C.classNames), initialize: function(e2) {
  var r2, s2, i2, a2, l2 = this;
  if (!t)
    throw new Error(U);
  if (!e2.provider)
    throw new Error("Provider is missing from options");
  this.options = u({}, C, {}, e2), this.classNames = u({}, this.classNames, {}, e2.classNames), this.markers = new import_leaflet.FeatureGroup(), this.classNames.container += " leaflet-geosearch-" + this.options.style, this.searchElement = new L({ searchLabel: this.options.searchLabel, classNames: { container: this.classNames.container, form: this.classNames.form, input: this.classNames.input }, handleSubmit: function(t2) {
    return l2.onSubmit(t2);
  } }), this.button = f("a", this.classNames.button, this.searchElement.container, { title: this.options.searchLabel, href: "#", onClick: function(t2) {
    return l2.onClick(t2);
  } }), import_leaflet.DomEvent.disableClickPropagation(this.button), this.resetButton = f("a", this.classNames.resetButton, this.searchElement.form, { text: "\xD7", href: "#", onClick: function() {
    return l2.clearResults(null, true);
  } }), import_leaflet.DomEvent.disableClickPropagation(this.resetButton), this.options.autoComplete && (this.resultList = new k({ handleClick: function(t2) {
    var e3 = t2.result;
    l2.searchElement.input.value = e3.label, l2.onSubmit({ query: e3.label, data: e3 });
  }, classNames: { resultlist: this.classNames.resultlist, item: this.classNames.item, notfound: this.classNames.notfound }, notFoundMessage: this.options.notFoundMessage }), this.searchElement.form.appendChild(this.resultList.container), this.searchElement.input.addEventListener("keyup", (r2 = function(t2) {
    return l2.autoSearch(t2);
  }, void 0 === (s2 = this.options.autoCompleteDelay) && (s2 = 250), void 0 === i2 && (i2 = false), function() {
    for (var t2 = arguments.length, e3 = new Array(t2), n2 = 0; n2 < t2; n2++)
      e3[n2] = arguments[n2];
    a2 && clearTimeout(a2), a2 = setTimeout(function() {
      a2 = null, i2 || r2.apply(void 0, e3);
    }, s2), i2 && !a2 && r2.apply(void 0, e3);
  }), true), this.searchElement.input.addEventListener("keydown", function(t2) {
    return l2.selectResult(t2);
  }, true), this.searchElement.input.addEventListener("keydown", function(t2) {
    return l2.clearResults(t2, true);
  }, true)), this.searchElement.form.addEventListener("click", function(t2) {
    t2.preventDefault();
  }, false);
}, onAdd: function(t2) {
  var e2 = this.options, r2 = e2.showMarker, n2 = e2.style;
  if (this.map = t2, r2 && this.markers.addTo(t2), "bar" === n2) {
    var s2 = t2.getContainer().querySelector(".leaflet-control-container");
    this.container = f("div", "leaflet-control-geosearch leaflet-geosearch-bar"), this.container.appendChild(this.searchElement.form), s2.appendChild(this.container);
  }
  return import_leaflet.DomEvent.disableClickPropagation(this.searchElement.form), this.searchElement.container;
}, onRemove: function() {
  var t2;
  return null == (t2 = this.container) || t2.remove(), this;
}, onClick: function(t2) {
  t2.preventDefault(), t2.stopPropagation();
  var e2 = this.searchElement, r2 = e2.container, n2 = e2.input;
  r2.classList.contains("active") ? (y(r2, "active"), this.clearResults()) : (v(r2, "active"), n2.focus());
}, selectResult: function(t2) {
  if (-1 !== [b, x, E].indexOf(t2.keyCode))
    if (t2.preventDefault(), t2.keyCode !== b) {
      var e2 = this.resultList.count() - 1;
      if (!(e2 < 0)) {
        var r2 = this.resultList.selected, n2 = t2.keyCode === x ? r2 + 1 : r2 - 1, o2 = this.resultList.select(n2 < 0 ? e2 : n2 > e2 ? 0 : n2);
        this.searchElement.input.value = o2.label;
      }
    } else {
      var s2 = this.resultList.select(this.resultList.selected);
      this.onSubmit({ query: this.searchElement.input.value, data: s2 });
    }
}, clearResults: function(t2, e2) {
  if (void 0 === e2 && (e2 = false), !t2 || 27 === t2.keyCode) {
    var r2 = this.options, n2 = r2.autoComplete;
    !e2 && r2.keepResult || (this.searchElement.input.value = "", this.markers.clearLayers()), n2 && this.resultList.clear();
  }
}, autoSearch: function(t2) {
  try {
    var e2 = this;
    if (w.indexOf(t2.keyCode) > -1)
      return Promise.resolve();
    var r2 = t2.target.value, n2 = e2.options.provider, o2 = function() {
      if (r2.length)
        return Promise.resolve(n2.search({ query: r2 })).then(function(t3) {
          t3 = t3.slice(0, e2.options.maxSuggestions), e2.resultList.render(t3, e2.options.resultFormat);
        });
      e2.resultList.clear();
    }();
    return Promise.resolve(o2 && o2.then ? o2.then(function() {
    }) : void 0);
  } catch (t3) {
    return Promise.reject(t3);
  }
}, onSubmit: function(t2) {
  try {
    var e2 = this;
    return Promise.resolve(e2.options.provider.search(t2)).then(function(r2) {
      r2 && r2.length > 0 && e2.showResult(r2[0], t2);
    });
  } catch (t3) {
    return Promise.reject(t3);
  }
}, showResult: function(t2, e2) {
  var r2 = this.options, n2 = r2.autoClose, o2 = r2.updateMap, s2 = this.markers.getLayers();
  s2.length >= this.options.maxMarkers && this.markers.removeLayer(s2[0]);
  var i2 = this.addMarker(t2, e2);
  o2 && this.centerMap(t2), this.map.fireEvent("geosearch/showlocation", { location: t2, marker: i2 }), n2 && this.closeResults();
}, closeResults: function() {
  var t2 = this.searchElement.container;
  t2.classList.contains("active") && y(t2, "active"), this.clearResults();
}, addMarker: function(t2, e2) {
  var r2 = this, n2 = this.options, o2 = n2.marker, i2 = n2.showPopup, a2 = n2.popupFormat, u2 = new import_leaflet.Marker([t2.y, t2.x], o2), l2 = t2.label;
  return "function" == typeof a2 && (l2 = a2({ query: e2, result: t2 })), u2.bindPopup(l2), this.markers.addLayer(u2), i2 && u2.openPopup(), o2.draggable && u2.on("dragend", function(t3) {
    r2.map.fireEvent("geosearch/marker/dragend", { location: u2.getLatLng(), event: t3 });
  }), u2;
}, centerMap: function(t2) {
  var e2 = this.options, r2 = e2.retainZoomLevel, n2 = e2.animateZoom, o2 = t2.bounds ? new import_leaflet.LatLngBounds(t2.bounds) : new import_leaflet.LatLng(t2.y, t2.x).toBounds(10), s2 = o2.isValid() ? o2 : this.markers.getBounds();
  !r2 && o2.isValid() && !t2.bounds || r2 || !o2.isValid() ? this.map.setView(s2.getCenter(), this.getZoom(), { animate: n2 }) : this.map.fitBounds(s2, { animate: n2 });
}, getZoom: function() {
  var t2 = this.options, e2 = t2.zoomLevel;
  return t2.retainZoomLevel ? this.map.getZoom() : e2;
} };
function R() {
  if (!t)
    throw new Error(U);
  for (var r2 = import_leaflet.Control.extend(P), n2 = arguments.length, o2 = new Array(n2), s2 = 0; s2 < n2; s2++)
    o2[s2] = arguments[s2];
  return p(r2, o2);
}
!function(t2) {
  t2[t2.SEARCH = 0] = "SEARCH", t2[t2.REVERSE = 1] = "REVERSE";
}(g || (g = {}));
var S = function() {
  function t2(t3) {
    void 0 === t3 && (t3 = {}), this.options = t3;
  }
  var e2 = t2.prototype;
  return e2.getParamString = function(t3) {
    void 0 === t3 && (t3 = {});
    var e3 = u({}, this.options.params, {}, t3);
    return Object.keys(e3).map(function(t4) {
      return encodeURIComponent(t4) + "=" + encodeURIComponent(e3[t4]);
    }).join("&");
  }, e2.getUrl = function(t3, e3) {
    return t3 + "?" + this.getParamString(e3);
  }, e2.search = function(t3) {
    try {
      var e3 = this, r2 = e3.endpoint({ query: t3.query, type: g.SEARCH });
      return Promise.resolve(fetch(r2)).then(function(t4) {
        return Promise.resolve(t4.json()).then(function(t5) {
          return e3.parse({ data: t5 });
        });
      });
    } catch (t4) {
      return Promise.reject(t4);
    }
  }, t2;
}();
var j = function(t2) {
  function e2() {
    return t2.apply(this, arguments) || this;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function() {
    return "https://places-dsn.algolia.net/1/places/query";
  }, r2.findBestMatchLevelIndex = function(t3) {
    var e3 = t3.find(function(t4) {
      return "full" === t4.matchLevel;
    }) || t3.find(function(t4) {
      return "partial" === t4.matchLevel;
    });
    return e3 ? t3.indexOf(e3) : 0;
  }, r2.getLabel = function(t3) {
    var e3, r3, n2, o2;
    return [null == (e3 = t3.locale_names) ? void 0 : e3.default[this.findBestMatchLevelIndex(t3._highlightResult.locale_names.default)], null == (r3 = t3.city) ? void 0 : r3.default[this.findBestMatchLevelIndex(t3._highlightResult.city.default)], t3.administrative[this.findBestMatchLevelIndex(t3._highlightResult.administrative)], null == (n2 = t3.postcode) ? void 0 : n2[this.findBestMatchLevelIndex(t3._highlightResult.postcode)], null == (o2 = t3.country) ? void 0 : o2.default].filter(Boolean).join(", ");
  }, r2.parse = function(t3) {
    var e3 = this;
    return t3.data.hits.map(function(t4) {
      return { x: t4._geoloc.lng, y: t4._geoloc.lat, label: e3.getLabel(t4), bounds: null, raw: t4 };
    });
  }, r2.search = function(t3) {
    var e3 = t3.query;
    try {
      var r3 = this, n2 = "string" == typeof e3 ? { query: e3 } : e3;
      return Promise.resolve(fetch(r3.endpoint(), { method: "POST", body: JSON.stringify(u({}, r3.options.params, {}, n2)) })).then(function(t4) {
        return Promise.resolve(t4.json()).then(function(t5) {
          return r3.parse({ data: t5 });
        });
      });
    } catch (t4) {
      return Promise.reject(t4);
    }
  }, e2;
}(S);
var q = function(t2) {
  function e2() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).searchUrl = "https://dev.virtualearth.net/REST/v1/Locations", e3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query, r3 = "string" == typeof e3 ? { q: e3 } : e3;
    return r3.jsonp = t3.jsonp, this.getUrl(this.searchUrl, r3);
  }, r2.parse = function(t3) {
    return 0 === t3.data.resourceSets.length ? [] : t3.data.resourceSets[0].resources.map(function(t4) {
      return { x: t4.point.coordinates[1], y: t4.point.coordinates[0], label: t4.address.formattedAddress, bounds: [[t4.bbox[0], t4.bbox[1]], [t4.bbox[2], t4.bbox[3]]], raw: t4 };
    });
  }, r2.search = function(t3) {
    var e3, r3, n2, o2 = t3.query;
    try {
      var s2 = this, i2 = "BING_JSONP_CB_" + Date.now();
      return Promise.resolve((e3 = s2.endpoint({ query: o2, jsonp: i2 }), r3 = i2, n2 = f("script", null, document.body), n2.setAttribute("type", "text/javascript"), new Promise(function(t4) {
        window[r3] = function(e4) {
          n2.remove(), delete window[r3], t4(e4);
        }, n2.setAttribute("src", e3);
      }))).then(function(t4) {
        return s2.parse({ data: t4 });
      });
    } catch (t4) {
      return Promise.reject(t4);
    }
  }, e2;
}(S);
var N = function(t2) {
  function e2() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).searchUrl = "https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find", e3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query, r3 = "string" == typeof e3 ? { text: e3 } : e3;
    return r3.f = "json", this.getUrl(this.searchUrl, r3);
  }, r2.parse = function(t3) {
    return t3.data.locations.map(function(t4) {
      return { x: t4.feature.geometry.x, y: t4.feature.geometry.y, label: t4.name, bounds: [[t4.extent.ymin, t4.extent.xmin], [t4.extent.ymax, t4.extent.xmax]], raw: t4 };
    });
  }, e2;
}(S);
var A = function(t2) {
  function e2(e3) {
    var r3;
    return void 0 === e3 && (e3 = {}), (r3 = t2.call(this, e3) || this).host = e3.host || "http://localhost:4000", r3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query;
    switch (t3.type) {
      case g.REVERSE:
        return this.getUrl(this.host + "/v1/reverse", "string" == typeof e3 ? {} : e3);
      default:
        return this.getUrl(this.host + "/v1/autocomplete", "string" == typeof e3 ? { text: e3 } : e3);
    }
  }, r2.parse = function(t3) {
    return t3.data.features.map(function(t4) {
      var e3 = { x: t4.geometry.coordinates[0], y: t4.geometry.coordinates[1], label: t4.properties.label, bounds: null, raw: t4 };
      return Array.isArray(t4.bbox) && 4 === t4.bbox.length && (e3.bounds = [[t4.bbox[1], t4.bbox[0]], [t4.bbox[3], t4.bbox[2]]]), e3;
    });
  }, e2;
}(S);
var M = function(t2) {
  function e2(e3) {
    return void 0 === e3 && (e3 = {}), e3.host = "https://api.geocode.earth", t2.call(this, e3) || this;
  }
  return l(e2, t2), e2;
}(A);
var F = function(t2) {
  function e2() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).searchUrl = "https://maps.googleapis.com/maps/api/geocode/json", e3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query;
    return this.getUrl(this.searchUrl, "string" == typeof e3 ? { address: e3 } : e3);
  }, r2.parse = function(t3) {
    return t3.data.results.map(function(t4) {
      return { x: t4.geometry.location.lng, y: t4.geometry.location.lat, label: t4.formatted_address, bounds: [[t4.geometry.viewport.southwest.lat, t4.geometry.viewport.southwest.lng], [t4.geometry.viewport.northeast.lat, t4.geometry.viewport.northeast.lng]], raw: t4 };
    });
  }, e2;
}(S);
var _ = function(t2) {
  function e2() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).searchUrl = "https://geocode.search.hereapi.com/v1/geocode", e3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query;
    return this.getUrl(this.searchUrl, "string" == typeof e3 ? { q: e3 } : e3);
  }, r2.parse = function(t3) {
    return t3.data.items.map(function(t4) {
      return { x: t4.position.lng, y: t4.position.lat, label: t4.address.label, bounds: null, raw: t4 };
    });
  }, e2;
}(S);
var B = function(t2) {
  function e2(e3) {
    var r3;
    void 0 === e3 && (e3 = {});
    var n2 = "https://nominatim.openstreetmap.org";
    return (r3 = t2.call(this, e3) || this).searchUrl = e3.searchUrl || n2 + "/search", r3.reverseUrl = e3.reverseUrl || n2 + "/reverse", r3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query, r3 = t3.type, n2 = "string" == typeof e3 ? { q: e3 } : e3;
    switch (n2.format = "json", r3) {
      case g.REVERSE:
        return this.getUrl(this.reverseUrl, n2);
      default:
        return this.getUrl(this.searchUrl, n2);
    }
  }, r2.parse = function(t3) {
    return (Array.isArray(t3.data) ? t3.data : [t3.data]).map(function(t4) {
      return { x: Number(t4.lon), y: Number(t4.lat), label: t4.display_name, bounds: [[parseFloat(t4.boundingbox[0]), parseFloat(t4.boundingbox[2])], [parseFloat(t4.boundingbox[1]), parseFloat(t4.boundingbox[3])]], raw: t4 };
    });
  }, e2;
}(S);
var O = function(t2) {
  function e2(e3) {
    return t2.call(this, u({}, e3, { searchUrl: "https://locationiq.org/v1/search.php", reverseUrl: "https://locationiq.org/v1/reverse.php" })) || this;
  }
  return l(e2, t2), e2;
}(B);
var I = function(t2) {
  function e2() {
    var e3;
    return (e3 = t2.apply(this, arguments) || this).searchUrl = "https://api.opencagedata.com/geocode/v1/json", e3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query, r3 = "string" == typeof e3 ? { q: e3 } : e3;
    return r3.format = "json", this.getUrl(this.searchUrl, r3);
  }, r2.parse = function(t3) {
    return t3.data.results.map(function(t4) {
      return { x: t4.geometry.lng, y: t4.geometry.lat, label: t4.formatted, bounds: [[t4.bounds.southwest.lat, t4.bounds.southwest.lng], [t4.bounds.northeast.lat, t4.bounds.northeast.lng]], raw: t4 };
    });
  }, r2.search = function(e3) {
    try {
      return Promise.resolve(e3.query.length < 2 ? [] : t2.prototype.search.call(this, e3));
    } catch (t3) {
      return Promise.reject(t3);
    }
  }, e2;
}(S);
var D = function(t2) {
  function e2(e3) {
    var r3;
    return void 0 === e3 && (e3 = {}), (r3 = t2.call(this, e3) || this).searchUrl = e3.searchUrl || "https://a.tiles.mapbox.com/v4/geocode/mapbox.places/", r3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    return this.getUrl("" + this.searchUrl + t3.query + ".json");
  }, r2.parse = function(t3) {
    return (Array.isArray(t3.data.features) ? t3.data.features : []).map(function(t4) {
      var e3 = null;
      return t4.bbox && (e3 = [[parseFloat(t4.bbox[1]), parseFloat(t4.bbox[0])], [parseFloat(t4.bbox[3]), parseFloat(t4.bbox[2])]]), { x: Number(t4.center[0]), y: Number(t4.center[1]), label: t4.place_name ? t4.place_name : t4.text, bounds: e3, raw: t4 };
    });
  }, e2;
}(S);
var V = function(t2) {
  function e2(e3) {
    var r3;
    void 0 === e3 && (e3 = {});
    var n2 = "https://api-adresse.data.gouv.fr";
    return (r3 = t2.call(this, e3) || this).searchUrl = e3.searchUrl || n2 + "/search", r3.reverseUrl = e3.reverseUrl || n2 + "/reverse", r3;
  }
  l(e2, t2);
  var r2 = e2.prototype;
  return r2.endpoint = function(t3) {
    var e3 = t3.query, r3 = "string" == typeof e3 ? { q: e3 } : e3;
    switch (t3.type) {
      case g.REVERSE:
        return this.getUrl(this.reverseUrl, r3);
      default:
        return this.getUrl(this.searchUrl, r3);
    }
  }, r2.parse = function(t3) {
    return t3.data.features.map(function(t4) {
      return { x: t4.geometry.coordinates[0], y: t4.geometry.coordinates[1], label: t4.properties.label, bounds: null, raw: t4 };
    });
  }, e2;
}(S);
export {
  j as AlgoliaProvider,
  q as BingProvider,
  N as EsriProvider,
  V as GeoApiFrProvider,
  R as GeoSearchControl,
  M as GeocodeEarthProvider,
  F as GoogleProvider,
  _ as HereProvider,
  S as JsonProvider,
  O as LocationIQProvider,
  D as MapBoxProvider,
  I as OpenCageProvider,
  B as OpenStreetMapProvider,
  A as PeliasProvider,
  R as SearchControl,
  L as SearchElement
};
//# sourceMappingURL=leaflet-geosearch.js.map
