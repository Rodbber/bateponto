{
  "version": 3,
  "sources": ["../../leaflet-geosearch/src/domUtils.ts", "../../leaflet-geosearch/src/providers/provider.ts", "../../leaflet-geosearch/src/constants.ts", "../../leaflet-geosearch/src/SearchElement.ts", "../../leaflet-geosearch/src/resultList.ts", "../../leaflet-geosearch/src/SearchControl.ts", "../../leaflet-geosearch/src/lib/debounce.ts", "../../leaflet-geosearch/src/providers/algoliaProvider.ts", "../../leaflet-geosearch/src/providers/bingProvider.ts", "../../leaflet-geosearch/src/providers/esriProvider.ts", "../../leaflet-geosearch/src/providers/peliasProvider.ts", "../../leaflet-geosearch/src/providers/geocodeEarthProvider.ts", "../../leaflet-geosearch/src/providers/googleProvider.ts", "../../leaflet-geosearch/src/providers/hereProvider.ts", "../../leaflet-geosearch/src/providers/openStreetMapProvider.ts", "../../leaflet-geosearch/src/providers/locationIQProvider.ts", "../../leaflet-geosearch/src/providers/openCageProvider.ts", "../../leaflet-geosearch/src/providers/mapBoxProvider.ts", "../../leaflet-geosearch/src/providers/geoApiFrProvider.ts"],
  "sourcesContent": ["export function createElement<T extends HTMLElement = HTMLElement>(\n  element: string,\n  className: string | null = '',\n  parent?: Element | null,\n  attributes: { [key: string]: string | ((event: any) => void) } = {},\n): T {\n  const el = document.createElement(element) as T;\n\n  if (className) {\n    el.className = className;\n  }\n\n  Object.keys(attributes).forEach((key) => {\n    if (typeof attributes[key] === 'function') {\n      // IE doesn't support startsWith\n      const type = (key.indexOf('on') === 0\n        ? key.substr(2).toLowerCase()\n        : key) as keyof HTMLElementEventMap;\n      el.addEventListener(type, attributes[key] as () => void);\n    } else if (key === 'html') {\n      el.innerHTML = attributes[key] as string;\n    } else if (key === 'text') {\n      el.innerText = attributes[key] as string;\n    } else {\n      el.setAttribute(key, attributes[key] as string);\n    }\n  });\n\n  if (parent) {\n    parent.appendChild(el);\n  }\n\n  return el;\n}\n\nexport function stopPropagation(event: Event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport function createScriptElement<T = object>(\n  url: string,\n  cb: string,\n): Promise<T> {\n  const script = createElement('script', null, document.body);\n  script.setAttribute('type', 'text/javascript');\n\n  return new Promise((resolve) => {\n    (window as any)[cb] = (json: T): void => {\n      script.remove();\n      delete (window as any)[cb];\n      resolve(json);\n    };\n\n    script.setAttribute('src', url);\n  });\n}\n\nexport const cx = (...classNames: (string | undefined)[]): string =>\n  classNames.filter(Boolean).join(' ').trim();\n\nexport function addClassName(\n  element: Element | null,\n  className: string | string[],\n): void {\n  if (!element || !element.classList) {\n    return;\n  }\n\n  // IE doesn't support adding multiple classes at once :(\n  const classNames = Array.isArray(className) ? className : [className];\n  classNames.forEach((name) => {\n    if (!element.classList.contains(name)) {\n      element.classList.add(name);\n    }\n  });\n}\n\nexport function removeClassName(\n  element: Element | null,\n  className: string | string[],\n): void {\n  if (!element || !element.classList) {\n    return;\n  }\n\n  // IE doesn't support removing multiple classes at once :(\n  const classNames = Array.isArray(className) ? className : [className];\n  classNames.forEach((name) => {\n    if (element.classList.contains(name)) {\n      element.classList.remove(name);\n    }\n  });\n}\n\nexport function replaceClassName(\n  element: Element,\n  find: string,\n  replace: string,\n): void {\n  removeClassName(element, find);\n  addClassName(element, replace);\n}\n", "export type PointTuple = [number, number];\nexport type BoundsTuple = [PointTuple, PointTuple];\n\nexport interface LatLng {\n  lat: number;\n  lng: number;\n}\n\nexport interface SearchResult<TRawResult = any> {\n  x: number;\n  y: number;\n  label: string;\n  bounds: BoundsTuple | null;\n  raw: TRawResult;\n}\n\nexport interface ProviderParams {\n  [key: string]: string | number | boolean;\n}\n\nexport interface ProviderOptions {\n  params?: ProviderParams;\n}\n\nexport enum RequestType {\n  SEARCH,\n  REVERSE,\n}\n\nexport interface EndpointArgument {\n  query: string | { [key: string]: string | number | boolean };\n  type?: RequestType;\n}\n\nexport interface SearchArgument {\n  query: string;\n}\n\nexport interface ParseArgument<TData> {\n  data: TData;\n}\n\nexport interface Provider<TRequestResult, TRawResult> {\n  options: ProviderOptions;\n\n  endpoint(options: EndpointArgument): string;\n  getParamString(params: ProviderParams): string;\n  parse(response: ParseArgument<TRequestResult>): SearchResult<TRawResult>[];\n  search(options: SearchArgument): Promise<SearchResult<TRawResult>[]>;\n}\n\nexport default abstract class AbstractProvider<\n  TRequestResult = any,\n  TRawResult = any\n> implements Provider<TRequestResult, TRawResult> {\n  options: ProviderOptions;\n\n  constructor(options: ProviderOptions = {}) {\n    this.options = options;\n  }\n\n  abstract endpoint(options: EndpointArgument): string;\n  abstract parse(\n    response: ParseArgument<TRequestResult>,\n  ): SearchResult<TRawResult>[];\n\n  getParamString(params: ProviderParams = {}): string {\n    const set = { ...this.options.params, ...params };\n    return Object.keys(set)\n      .map(\n        (key) => `${encodeURIComponent(key)}=${encodeURIComponent(set[key])}`,\n      )\n      .join('&');\n  }\n\n  getUrl(url: string, params?: ProviderParams): string {\n    return `${url}?${this.getParamString(params)}`;\n  }\n\n  async search(options: SearchArgument): Promise<SearchResult<TRawResult>[]> {\n    const url = this.endpoint({\n      query: options.query,\n      type: RequestType.SEARCH,\n    });\n\n    const request = await fetch(url);\n    const json: TRequestResult = await request.json();\n    return this.parse({ data: json });\n  }\n}\n", "export const ENTER_KEY = 13;\nexport const ESCAPE_KEY = 27;\nexport const ARROW_DOWN_KEY = 40;\nexport const ARROW_UP_KEY = 38;\nexport const ARROW_LEFT_KEY = 37;\nexport const ARROW_RIGHT_KEY = 39;\n\nexport const SPECIAL_KEYS = [\n  ENTER_KEY,\n  ESCAPE_KEY,\n  ARROW_DOWN_KEY,\n  ARROW_UP_KEY,\n  ARROW_LEFT_KEY,\n  ARROW_RIGHT_KEY,\n];\n", "import {\n  createElement,\n  addClassName,\n  removeClassName,\n  cx,\n  stopPropagation,\n  replaceClassName,\n} from './domUtils';\n\nimport { ESCAPE_KEY, ENTER_KEY } from './constants';\n\ninterface SearchElementProps {\n  searchLabel?: string;\n  handleSubmit: (args: { query: string }) => void;\n  classNames?: {\n    container?: string;\n    form?: string;\n    input?: string;\n  };\n}\n\nexport default class SearchElement {\n  container: HTMLDivElement;\n  form: HTMLFormElement;\n  input: HTMLInputElement;\n  handleSubmit: (args: { query: string }) => void;\n  hasError = false;\n\n  constructor({\n    handleSubmit,\n    searchLabel,\n    classNames = {},\n  }: SearchElementProps) {\n    this.container = createElement<HTMLDivElement>(\n      'div',\n      cx('geosearch', classNames.container),\n    );\n\n    this.form = createElement<HTMLFormElement>(\n      'form',\n      ['', classNames.form].join(' '),\n      this.container,\n      {\n        autocomplete: 'none',\n        onClick: stopPropagation,\n        onDblClick: stopPropagation,\n        touchStart: stopPropagation,\n        touchEnd: stopPropagation,\n      },\n    );\n\n    this.input = createElement<HTMLInputElement>(\n      'input',\n      ['glass', classNames.input].join(' '),\n      this.form,\n      {\n        type: 'text',\n        placeholder: searchLabel || 'search',\n        onInput: this.onInput,\n        onKeyUp: (e) => this.onKeyUp(e),\n        onKeyPress: (e) => this.onKeyPress(e),\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n\n        // For some reason, leaflet is blocking the 'touchstart', manually give\n        // focus to the input onClick\n        // > Ignored attempt to cancel a touchstart event with cancelable=false,\n        // > for example because scrolling is in progress and cannot be interrupted.\n        onClick: () => {\n          this.input.focus();\n          this.input.dispatchEvent(new Event('focus'));\n        },\n      },\n    );\n\n    this.handleSubmit = handleSubmit;\n  }\n\n  onFocus(): void {\n    addClassName(this.form, 'active');\n  }\n\n  onBlur(): void {\n    removeClassName(this.form, 'active');\n  }\n\n  async onSubmit(event: Event): Promise<void> {\n    stopPropagation(event);\n    replaceClassName(this.container, 'error', 'pending');\n\n    await this.handleSubmit({ query: this.input.value });\n    removeClassName(this.container, 'pending');\n  }\n\n  onInput(): void {\n    if (!this.hasError) {\n      return;\n    }\n\n    removeClassName(this.container, 'error');\n    this.hasError = false;\n  }\n\n  onKeyUp(event: KeyboardEvent): void {\n    if (event.keyCode !== ESCAPE_KEY) {\n      return;\n    }\n\n    removeClassName(this.container, ['pending', 'active']);\n\n    this.input.value = '';\n\n    document.body.focus();\n    document.body.blur();\n  }\n\n  onKeyPress(event: KeyboardEvent): void {\n    if (event.keyCode !== ENTER_KEY) {\n      return;\n    }\n\n    this.onSubmit(event);\n  }\n\n  setQuery(query: string): void {\n    this.input.value = query;\n  }\n}\n", "import { createElement, addClassName, removeClassName, cx } from './domUtils';\nimport { SearchResult } from './providers/provider';\n\ninterface ResultListProps {\n  handleClick: (args: { result: SearchResult }) => void;\n  classNames?: {\n    resultlist?: string;\n    item?: string;\n    notfound?: string;\n  };\n  notFoundMessage?: string;\n}\n\nexport default class ResultList {\n  handleClick?: (args: { result: SearchResult }) => void;\n  selected = -1;\n  results: SearchResult[] = [];\n\n  container: HTMLDivElement;\n  resultItem: HTMLDivElement;\n  notFoundMessage?: HTMLDivElement;\n\n  constructor({\n    handleClick,\n    classNames = {},\n    notFoundMessage,\n  }: ResultListProps) {\n    this.handleClick = handleClick;\n    this.notFoundMessage = !!notFoundMessage\n      ? createElement<HTMLDivElement>(\n          'div',\n          cx(classNames.notfound),\n          undefined,\n          { html: notFoundMessage! },\n        )\n      : undefined;\n\n    this.container = createElement<HTMLDivElement>(\n      'div',\n      cx('results', classNames.resultlist),\n    );\n    this.container.addEventListener('click', this.onClick, true);\n\n    this.resultItem = createElement<HTMLDivElement>('div', cx(classNames.item));\n  }\n\n  render(results: SearchResult[] = [], resultFormat: Function): void {\n    this.clear();\n\n    results.forEach((result, idx) => {\n      const child = this.resultItem.cloneNode(true) as HTMLDivElement;\n      child.setAttribute('data-key', `${idx}`);\n      child.innerHTML = resultFormat({ result });\n      this.container.appendChild(child);\n    });\n\n    if (results.length > 0) {\n      addClassName(this.container.parentElement, 'open');\n      addClassName(this.container, 'active');\n    } else if (!!this.notFoundMessage) {\n      this.container.appendChild(this.notFoundMessage);\n      addClassName(this.container.parentElement, 'open');\n    }\n\n    this.results = results;\n  }\n\n  select(index: number): SearchResult {\n    // eslint-disable-next-line no-confusing-arrow\n    Array.from(this.container.children).forEach((child, idx) =>\n      idx === index\n        ? addClassName(child, 'active')\n        : removeClassName(child, 'active'),\n    );\n\n    this.selected = index;\n    return this.results[index];\n  }\n\n  count(): number {\n    return this.results ? this.results.length : 0;\n  }\n\n  clear(): void {\n    this.selected = -1;\n\n    while (this.container.lastChild) {\n      this.container.removeChild(this.container.lastChild);\n    }\n\n    removeClassName(this.container.parentElement, 'open');\n    removeClassName(this.container, 'active');\n  }\n\n  onClick = (event: Event): void => {\n    if (typeof this.handleClick !== 'function') {\n      return;\n    }\n\n    const target = event.target as HTMLDivElement;\n    if (\n      !target ||\n      !this.container.contains(target) ||\n      !target.hasAttribute('data-key')\n    ) {\n      return;\n    }\n\n    const idx = Number(target.getAttribute('data-key'));\n    this.clear();\n    this.handleClick({ result: this.results[idx] });\n  };\n}\n", "import * as L from 'leaflet';\nimport { ControlPosition, FeatureGroup, MarkerOptions, Map } from 'leaflet';\nimport SearchElement from './SearchElement';\nimport ResultList from './resultList';\nimport debounce from './lib/debounce';\n\nimport {\n  createElement,\n  addClassName,\n  removeClassName,\n  stopPropagation,\n} from './domUtils';\nimport {\n  ENTER_KEY,\n  SPECIAL_KEYS,\n  ARROW_UP_KEY,\n  ARROW_DOWN_KEY,\n  ESCAPE_KEY,\n} from './constants';\nimport AbstractProvider, { SearchResult } from './providers/provider';\nimport { Provider } from './providers';\n\nconst defaultOptions: Omit<SearchControlProps, 'provider'> = {\n  position: 'topleft',\n  style: 'button',\n  showMarker: true,\n  showPopup: false,\n  popupFormat: ({ result }) => `${result.label}`,\n  resultFormat: ({ result }) => `${result.label}`,\n  marker: {\n    icon: L && L.Icon ? new L.Icon.Default() : undefined,\n    draggable: false,\n  },\n  maxMarkers: 1,\n  maxSuggestions: 5,\n  retainZoomLevel: false,\n  animateZoom: true,\n  searchLabel: 'Enter address',\n  notFoundMessage: '',\n  messageHideDelay: 3000,\n  zoomLevel: 18,\n  classNames: {\n    container: 'leaflet-bar leaflet-control leaflet-control-geosearch',\n    button: 'leaflet-bar-part leaflet-bar-part-single',\n    resetButton: 'reset',\n    msgbox: 'leaflet-bar message',\n    form: '',\n    input: '',\n    resultlist: '',\n    item: '',\n    notfound: 'leaflet-bar-notfound',\n  },\n  autoComplete: true,\n  autoCompleteDelay: 250,\n  autoClose: false,\n  keepResult: false,\n  updateMap: true,\n};\n\nconst UNINITIALIZED_ERR =\n  'Leaflet must be loaded before instantiating the GeoSearch control';\n\ninterface SearchControlProps {\n  /** the provider to use for searching */\n  provider: Provider;\n  /** the leaflet position to render the element in */\n  position: ControlPosition;\n  /**\n   * the stye of the search element\n   * @default bar\n   **/\n  style: 'button' | 'bar';\n\n  marker: MarkerOptions;\n  maxMarkers: number;\n  showMarker: boolean;\n  showPopup: boolean;\n  popupFormat<T = any>(args: {\n    query: Selection;\n    result: SearchResult<T>;\n  }): string;\n\n  resultFormat<T = any>(args: { result: SearchResult<T> }): string;\n\n  searchLabel: string;\n  notFoundMessage: string;\n  messageHideDelay: number;\n\n  animateZoom: boolean;\n  zoomLevel: number;\n  retainZoomLevel: boolean;\n\n  classNames: {\n    container: string;\n    button: string;\n    resetButton: string;\n    msgbox: string;\n    form: string;\n    input: string;\n    resultlist: string;\n    item: string;\n    notfound: string;\n  };\n\n  autoComplete: boolean;\n  autoCompleteDelay: number;\n  maxSuggestions: number;\n  autoClose: boolean;\n  keepResult: boolean;\n  updateMap: boolean;\n}\n\nexport type SearchControlOptions = Partial<SearchControlProps> & {\n  provider: Provider;\n};\n\ninterface Selection {\n  query: string;\n  data?: SearchResult;\n}\n\ninterface SearchControl {\n  options: Omit<SearchControlProps, 'provider'> & {\n    provider?: SearchControlProps['provider'];\n  };\n  markers: FeatureGroup;\n  searchElement: SearchElement;\n  resultList: ResultList;\n  classNames: SearchControlProps['classNames'];\n  container: HTMLDivElement;\n  input: HTMLInputElement;\n  button: HTMLAnchorElement;\n  resetButton: HTMLAnchorElement;\n  map: Map;\n\n  // [key: string]: any;\n  initialize(options: SearchControlProps): void;\n  onSubmit(result: Selection): void;\n  onClick(event: Event): void;\n  clearResults(event?: KeyboardEvent | null, force?: boolean): void;\n  autoSearch(event: KeyboardEvent): void;\n  selectResult(event: KeyboardEvent): void;\n  showResult(result: SearchResult, query: Selection): void;\n  addMarker(result: SearchResult, selection: Selection): void;\n  centerMap(result: SearchResult): void;\n  closeResults(): void;\n  getZoom(): number;\n  onAdd(map: Map): HTMLDivElement;\n  onRemove(): SearchControl;\n}\n\n// @ts-ignore\nconst Control: SearchControl = {\n  options: { ...defaultOptions },\n  classNames: { ...defaultOptions.classNames },\n\n  initialize(options: SearchControlOptions) {\n    if (!L) {\n      throw new Error(UNINITIALIZED_ERR);\n    }\n\n    if (!options.provider) {\n      throw new Error('Provider is missing from options');\n    }\n\n    // merge given options with control defaults\n    this.options = { ...defaultOptions, ...options };\n    this.classNames = { ...this.classNames, ...options.classNames };\n\n    this.markers = new L.FeatureGroup();\n    this.classNames.container += ` leaflet-geosearch-${this.options.style}`;\n\n    this.searchElement = new SearchElement({\n      searchLabel: this.options.searchLabel,\n      classNames: {\n        container: this.classNames.container,\n        form: this.classNames.form,\n        input: this.classNames.input,\n      },\n      handleSubmit: (result) => this.onSubmit(result),\n    });\n\n    this.button = createElement<HTMLAnchorElement>(\n      'a',\n      this.classNames.button,\n      this.searchElement.container,\n      {\n        title: this.options.searchLabel,\n        href: '#',\n        onClick: (e) => this.onClick(e),\n      },\n    );\n\n    L.DomEvent.disableClickPropagation(this.button);\n\n    this.resetButton = createElement<HTMLAnchorElement>(\n      'a',\n      this.classNames.resetButton,\n      this.searchElement.form,\n      {\n        text: '\u00D7',\n        href: '#',\n        onClick: () => this.clearResults(null, true),\n      },\n    );\n\n    L.DomEvent.disableClickPropagation(this.resetButton);\n\n    if (this.options.autoComplete) {\n      this.resultList = new ResultList({\n        handleClick: ({ result }): void => {\n          this.searchElement.input.value = result.label;\n          this.onSubmit({ query: result.label, data: result });\n        },\n        classNames: {\n          resultlist: this.classNames.resultlist,\n          item: this.classNames.item,\n          notfound: this.classNames.notfound,\n        },\n        notFoundMessage: this.options.notFoundMessage,\n      });\n\n      this.searchElement.form.appendChild(this.resultList.container);\n\n      this.searchElement.input.addEventListener(\n        'keyup',\n        debounce(\n          (e: KeyboardEvent) => this.autoSearch(e),\n          this.options.autoCompleteDelay,\n        ),\n        true,\n      );\n\n      this.searchElement.input.addEventListener(\n        'keydown',\n        (e: KeyboardEvent) => this.selectResult(e),\n        true,\n      );\n\n      this.searchElement.input.addEventListener(\n        'keydown',\n        (e: KeyboardEvent) => this.clearResults(e, true),\n        true,\n      );\n    }\n\n    this.searchElement.form.addEventListener(\n      'click',\n      (e) => {\n        e.preventDefault();\n      },\n      false,\n    );\n  },\n\n  onAdd(map: Map) {\n    const { showMarker, style } = this.options;\n\n    this.map = map;\n    if (showMarker) {\n      this.markers.addTo(map);\n    }\n\n    if (style === 'bar') {\n      const root = map\n        .getContainer()\n        .querySelector('.leaflet-control-container');\n\n      this.container = createElement<HTMLDivElement>(\n        'div',\n        'leaflet-control-geosearch leaflet-geosearch-bar',\n      );\n\n      this.container.appendChild(this.searchElement.form);\n      root!.appendChild(this.container);\n    }\n\n    L.DomEvent.disableClickPropagation(this.searchElement.form);\n    return this.searchElement.container;\n  },\n\n  onRemove() {\n    this.container?.remove();\n    return this;\n  },\n\n  onClick(event: Event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    const { container, input } = this.searchElement;\n\n    if (container.classList.contains('active')) {\n      removeClassName(container, 'active');\n      this.clearResults();\n    } else {\n      addClassName(container, 'active');\n      input.focus();\n    }\n  },\n\n  selectResult(event) {\n    if (\n      [ENTER_KEY, ARROW_DOWN_KEY, ARROW_UP_KEY].indexOf(event.keyCode) === -1\n    ) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (event.keyCode === ENTER_KEY) {\n      const item = this.resultList.select(this.resultList.selected);\n      this.onSubmit({ query: this.searchElement.input.value, data: item });\n      return;\n    }\n\n    const max = this.resultList.count() - 1;\n    if (max < 0) {\n      return;\n    }\n\n    const { selected } = this.resultList;\n    const next = event.keyCode === ARROW_DOWN_KEY ? selected + 1 : selected - 1;\n    const idx = next < 0 ? max : next > max ? 0 : next;\n\n    const item = this.resultList.select(idx);\n    this.searchElement.input.value = item.label;\n  },\n\n  clearResults(event: KeyboardEvent | null, force = false) {\n    if (event && event.keyCode !== ESCAPE_KEY) {\n      return;\n    }\n\n    const { keepResult, autoComplete } = this.options;\n\n    if (force || !keepResult) {\n      this.searchElement.input.value = '';\n      this.markers.clearLayers();\n    }\n\n    if (autoComplete) {\n      this.resultList.clear();\n    }\n  },\n\n  async autoSearch(event) {\n    if (SPECIAL_KEYS.indexOf(event.keyCode) > -1) {\n      return;\n    }\n\n    const query = (event.target as HTMLInputElement).value;\n    const { provider } = this.options;\n\n    if (query.length) {\n      let results = await provider!.search({ query });\n      results = results.slice(0, this.options.maxSuggestions);\n      this.resultList.render(results, this.options.resultFormat);\n    } else {\n      this.resultList.clear();\n    }\n  },\n\n  async onSubmit(query) {\n    const { provider } = this.options;\n\n    const results = await provider!.search(query);\n\n    if (results && results.length > 0) {\n      this.showResult(results[0], query);\n    }\n  },\n\n  showResult(result, query) {\n    const { autoClose, updateMap } = this.options;\n\n    const markers = this.markers.getLayers();\n    if (markers.length >= this.options.maxMarkers) {\n      this.markers.removeLayer(markers[0]);\n    }\n\n    const marker = this.addMarker(result, query);\n\n    if (updateMap) {\n      this.centerMap(result);\n    }\n\n    this.map.fireEvent('geosearch/showlocation', {\n      location: result,\n      marker,\n    });\n\n    if (autoClose) {\n      this.closeResults();\n    }\n  },\n\n  closeResults() {\n    const { container } = this.searchElement;\n\n    if (container.classList.contains('active')) {\n      removeClassName(container, 'active');\n    }\n\n    this.clearResults();\n  },\n\n  addMarker(result, query) {\n    const { marker: options, showPopup, popupFormat } = this.options;\n    const marker = new L.Marker([result.y, result.x], options);\n    let popupLabel = result.label;\n\n    if (typeof popupFormat === 'function') {\n      popupLabel = popupFormat({ query, result });\n    }\n\n    marker.bindPopup(popupLabel);\n\n    this.markers.addLayer(marker);\n\n    if (showPopup) {\n      marker.openPopup();\n    }\n\n    if (options.draggable) {\n      marker.on('dragend', (args) => {\n        this.map.fireEvent('geosearch/marker/dragend', {\n          location: marker.getLatLng(),\n          event: args,\n        });\n      });\n    }\n\n    return marker;\n  },\n\n  centerMap(result) {\n    const { retainZoomLevel, animateZoom } = this.options;\n\n    const resultBounds = result.bounds\n      ? new L.LatLngBounds(result.bounds)\n      : new L.LatLng(result.y, result.x).toBounds(10);\n\n    const bounds = resultBounds.isValid()\n      ? resultBounds\n      : this.markers.getBounds();\n\n    if (!retainZoomLevel && resultBounds.isValid() && !result.bounds) {\n      this.map.setView(bounds.getCenter(), this.getZoom(), {\n        animate: animateZoom,\n      });\n    } else if (!retainZoomLevel && resultBounds.isValid()) {\n      this.map.fitBounds(bounds, { animate: animateZoom });\n    } else {\n      this.map.setView(bounds.getCenter(), this.getZoom(), {\n        animate: animateZoom,\n      });\n    }\n  },\n\n  getZoom(): number {\n    const { retainZoomLevel, zoomLevel } = this.options;\n    return retainZoomLevel ? this.map.getZoom() : zoomLevel;\n  },\n};\n\nexport default function SearchControl(...options: any[]) {\n  if (!L) {\n    throw new Error(UNINITIALIZED_ERR);\n  }\n\n  const LControl = L.Control.extend(Control);\n  return new LControl(...options);\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nexport default function debounce(\n  cb: (...args: any[]) => void,\n  wait = 250,\n  immediate = false,\n): (...args: any[]) => void {\n  let timeout: ReturnType<typeof setTimeout> | null;\n\n  return (...args: any[]): void => {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n\n    timeout = setTimeout(() => {\n      timeout = null;\n\n      if (!immediate) {\n        cb(...args);\n      }\n    }, wait);\n\n    if (immediate && !timeout) {\n      cb(...args);\n    }\n  };\n}\n", "import AbstractProvider, {\n  LatLng,\n  ParseArgument,\n  SearchArgument,\n  SearchResult,\n} from './provider';\n\ninterface RequestResult {\n  hits: RawResult[];\n}\n\ninterface ValueMatch {\n  value: string;\n  matchLevel: string;\n  matchedWords: string[];\n  fullyHighlighted?: boolean;\n}\n\ninterface RawResult {\n  country: { [key: string]: string };\n  country_code: string;\n  city: { [key: string]: string[] };\n  importance: number;\n  _tags: string[];\n  postcode: string[];\n  population: number;\n  is_country: boolean;\n  is_highway: boolean;\n  is_city: boolean;\n  is_popular: boolean;\n  administrative: string[];\n  admin_level: number;\n  is_suburb: boolean;\n  locale_names: {\n    default: string[];\n  };\n  _geoloc: LatLng;\n  objectID: string;\n  _highlightResult: {\n    country: {\n      default: ValueMatch;\n      [key: string]: ValueMatch;\n    };\n    city: {\n      default: ValueMatch[];\n      [key: string]: ValueMatch[];\n    };\n    postcode: ValueMatch[];\n    administrative: ValueMatch[];\n    locale_names: {\n      default: ValueMatch[];\n    };\n  };\n}\n\ninterface ProviderOptions {\n  key?: string;\n  [key: string]: string | boolean | number | undefined;\n}\n\nexport default class Provider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  endpoint(): string {\n    // No query, Algolia requires POST request\n    return 'https://places-dsn.algolia.net/1/places/query';\n  }\n\n  /**\n   * Find index of value with best match\n   * (full, fallback to partial, and then to 0)\n   */\n  findBestMatchLevelIndex(vms: ValueMatch[]): number {\n    const match =\n      vms.find((vm) => vm.matchLevel === 'full') ||\n      vms.find((vm) => vm.matchLevel === 'partial');\n    return match ? vms.indexOf(match) : 0;\n  }\n\n  /**\n   * Algolia not provides labels for hits, so\n   * we will implement that builder ourselves\n   */\n  getLabel(result: RawResult): string {\n    return [\n      // Building + Street\n      result.locale_names?.default[\n        this.findBestMatchLevelIndex(\n          result._highlightResult.locale_names.default,\n        )\n      ],\n      // City\n      result.city?.default[\n        this.findBestMatchLevelIndex(result._highlightResult.city.default)\n      ],\n      // Administrative (State / Province)\n      result.administrative[\n        this.findBestMatchLevelIndex(result._highlightResult.administrative)\n      ],\n      // Zip code / Postal code\n      result.postcode?.[\n        this.findBestMatchLevelIndex(result._highlightResult.postcode)\n      ],\n      // Country\n      result.country?.default,\n    ]\n      .filter(Boolean)\n      .join(', ');\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return response.data.hits.map((r) => ({\n      x: r._geoloc.lng,\n      y: r._geoloc.lat,\n      label: this.getLabel(r),\n      bounds: null, // Algolia API does not provide bounds\n      raw: r,\n    }));\n  }\n\n  async search({ query }: SearchArgument): Promise<SearchResult<RawResult>[]> {\n    const params = typeof query === 'string' ? { query } : query;\n\n    const request = await fetch(this.endpoint(), {\n      method: 'POST',\n      body: JSON.stringify({\n        ...this.options.params,\n        ...params,\n      }),\n    });\n\n    const json = await request.json();\n    return this.parse({ data: json });\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  SearchArgument,\n  SearchResult,\n} from './provider';\nimport { createScriptElement } from '../domUtils';\n\nexport interface RequestResult {\n  authenticationResultCode: string;\n  brandLogoUri: string;\n  copyright: string;\n  resourceSets: {\n    estimatedTotal: number;\n    resources: RawResult[];\n  }[];\n  statusCode: number;\n  statusDescription: string;\n  traceId: string;\n}\n\nexport interface RawResult {\n  __type: string;\n  bbox: [number, number, number, number];\n  name: string;\n  point: { type: 'Point'; coordinates: [number, number] };\n  address: {\n    adminDistrict: string;\n    adminDistrict2: string;\n    countryRegion: string;\n    formattedAddress: string;\n    locality: string;\n  };\n  confidence: string;\n  entityType: string;\n  geocodePoints: [\n    {\n      type: 'Point';\n      coordinates: [number, number];\n      calculationMethod: string;\n      usageTypes: string[];\n    },\n  ];\n  matchCodes: string[];\n}\n\nexport default class BingProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl = 'https://dev.virtualearth.net/REST/v1/Locations';\n\n  endpoint({ query, jsonp }: EndpointArgument & { jsonp: string }): string {\n    const params = typeof query === 'string' ? { q: query } : query;\n    params.jsonp = jsonp;\n\n    return this.getUrl(this.searchUrl, params);\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    if (response.data.resourceSets.length === 0) {\n      return [];\n    }\n\n    return response.data.resourceSets[0].resources.map((r) => ({\n      x: r.point.coordinates[1],\n      y: r.point.coordinates[0],\n      label: r.address.formattedAddress,\n      bounds: [\n        [r.bbox[0], r.bbox[1]], // s, w\n        [r.bbox[2], r.bbox[3]], // n, e\n      ],\n      raw: r,\n    }));\n  }\n\n  async search({ query }: SearchArgument): Promise<SearchResult<RawResult>[]> {\n    const jsonp = `BING_JSONP_CB_${Date.now()}`;\n    const json = await createScriptElement<RequestResult>(\n      this.endpoint({ query, jsonp }),\n      jsonp,\n    );\n\n    return this.parse({ data: json });\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  SearchResult,\n} from './provider';\n\ninterface RequestResult {\n  spatialReference: { wkid: number; latestWkid: number };\n  locations: RawResult[];\n}\n\ninterface RawResult {\n  name: string;\n  extent: {\n    xmin: number;\n    ymin: number;\n    xmax: number;\n    ymax: number;\n  };\n  feature: {\n    geometry: { x: number; y: number };\n    attributes: { Score: number; Addr_Type: string };\n  };\n}\n\nexport default class EsriProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl =\n    'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find';\n\n  endpoint({ query }: EndpointArgument): string {\n    const params = typeof query === 'string' ? { text: query } : query;\n    params.f = 'json';\n\n    return this.getUrl(this.searchUrl, params);\n  }\n\n  parse(result: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return result.data.locations.map((r) => ({\n      x: r.feature.geometry.x,\n      y: r.feature.geometry.y,\n      label: r.name,\n      bounds: [\n        [r.extent.ymin, r.extent.xmin], // s, w\n        [r.extent.ymax, r.extent.xmax], // n, e\n      ],\n      raw: r,\n    }));\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  ProviderOptions,\n  RequestType,\n  SearchResult,\n} from './provider';\n\nexport interface RequestResult {\n  geocoding: object;\n  features: RawResult[];\n}\n\nexport type PeliasProviderOptions = {\n  host?: string;\n} & ProviderOptions;\n\nexport interface RawResult {\n  type: 'Feature';\n  geometry: {\n    type: 'Point';\n    coordinates: [number, number];\n  };\n  bbox?: [number, number, number, number];\n  properties: {\n    id: string;\n    source_id: string;\n    gid: string;\n\n    layer: string;\n    source: string;\n\n    label: string;\n    name: string;\n\n    accuracy: 'centroid' | 'point';\n    confidence?: number;\n    match_type?: 'exact' | 'interpolated' | 'fallback';\n\n    borough?: string;\n    borough_a?: string;\n    borough_gid?: string;\n    continent?: string;\n    continent_a?: string;\n    continent_gid?: string;\n    country?: string;\n    country_a?: string;\n    country_gid?: string;\n    county?: string;\n    county_a?: string;\n    county_gid?: string;\n    dependency?: string;\n    dependency_a?: string;\n    dependency_gid?: string;\n    empire?: string;\n    empire_a?: string;\n    empire_gid?: string;\n    localadmin?: string;\n    localadmin_a?: string;\n    localadmin_gid?: string;\n    locality?: string;\n    locality_a?: string;\n    locality_gid?: string;\n    macrocounty?: string;\n    macrocounty_a?: string;\n    macrocounty_gid?: string;\n    macroregion?: string;\n    macroregion_a?: string;\n    macroregion_gid?: string;\n    marinearea?: string;\n    marinearea_a?: string;\n    marinearea_gid?: string;\n    neighbourhood?: string;\n    neighbourhood_a?: string;\n    neighbourhood_gid?: string;\n    ocean?: string;\n    ocean_a?: string;\n    ocean_gid?: string;\n    postalcode?: string;\n    postalcode_a?: string;\n    postalcode_gid?: string;\n    region?: string;\n    region_a?: string;\n    region_gid?: string;\n\n    street?: string;\n    housenumber?: string;\n\n    addendum?: any;\n  };\n}\n\nexport default class PeliasProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  // Pelias servers are self-hosted so you'll need to configure the 'options.host' string\n  // to identify where requests to your running pelias/api server instance should be sent.\n  // note: you SHOULD include the scheme, domain and port but NOT any path or parameters.\n  // If you're using the Docker setup (https://github.com/pelias/docker)\n  // then the default host of 'http://localhost:4000' will work out of the box.\n  host: string;\n\n  constructor(options: PeliasProviderOptions = {}) {\n    super(options);\n    this.host = options.host || 'http://localhost:4000';\n  }\n\n  /**\n   * note: Pelias has four different query modes:\n   * /v1/autocomplete: for partially completed inputs (such as when a user types)\n   * /v1/search: for completed inputs (such as when geocoding a CSV file)\n   * /v1/search/structured: for completed inputs with fields already separated\n   * /v1/reverse: for finding places nearby/enveloping a point\n   */\n  endpoint({ query, type }: EndpointArgument) {\n    switch (type) {\n      // case RequestType.AUTOCOMPLETE:\n      //   const autocompleteParams = (typeof query === 'string') ? { text: query } : query;\n      //   return this.getUrl(`${this.host}/v1/autocomplete`, autocompleteParams);\n\n      // case RequestType.FULLTEXT:\n      //   const searchParams = (typeof query === 'string') ? { text: query } : query;\n      //   return this.getUrl(`${this.host}/v1/search`, searchParams);\n\n      // case RequestType.STRUCTURED:\n      //   const structuredParams = (typeof query === 'string') ? { address: query } : query;\n      //   return this.getUrl(`${this.host}/v1/search/structured`, structuredParams);\n\n      case RequestType.REVERSE:\n        const reverseParams = typeof query === 'string' ? {} : query;\n        return this.getUrl(`${this.host}/v1/reverse`, reverseParams);\n\n      // note: the default query mode is set to 'autocomplete'\n      default:\n        const autocompleteParams =\n          typeof query === 'string' ? { text: query } : query;\n        return this.getUrl(`${this.host}/v1/autocomplete`, autocompleteParams);\n    }\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return response.data.features.map((feature) => {\n      const res: SearchResult<RawResult> = {\n        x: feature.geometry.coordinates[0],\n        y: feature.geometry.coordinates[1],\n        label: feature.properties.label,\n        bounds: null,\n        raw: feature,\n      };\n\n      // bbox values are only available for features derived from non-point geometries\n      // geojson bbox format: [minX, minY, maxX, maxY]\n      if (Array.isArray(feature.bbox) && feature.bbox.length === 4) {\n        res.bounds = [\n          [feature.bbox[1], feature.bbox[0]], // s, w\n          [feature.bbox[3], feature.bbox[2]], // n, e\n        ];\n      }\n\n      return res;\n    });\n  }\n}\n", "import PeliasProvider, { PeliasProviderOptions } from './peliasProvider';\n\nexport default class GeocodeEarthProvider extends PeliasProvider {\n  constructor(options: PeliasProviderOptions = {}) {\n    options.host = 'https://api.geocode.earth';\n    super(options);\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  LatLng,\n  ParseArgument,\n  SearchResult,\n} from './provider';\n\nexport interface RequestResult {\n  results: RawResult[];\n  status: string;\n}\n\nexport interface RawResult {\n  address_components: {\n    long_name: string;\n    short_name: string;\n    types: string[];\n  }[];\n  formatted_address: string;\n  geometry: {\n    location: LatLng;\n    location_type: string;\n    viewport: {\n      northeast: LatLng;\n      southwest: LatLng;\n    };\n  };\n  place_id: string;\n  plus_code: {\n    compound_code: string;\n    global_code: string;\n  };\n  types: string[];\n}\n\nexport default class GoogleProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n  endpoint({ query }: EndpointArgument) {\n    const params = typeof query === 'string' ? { address: query } : query;\n    return this.getUrl(this.searchUrl, params);\n  }\n\n  parse(result: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return result.data.results.map((r) => ({\n      x: r.geometry.location.lng,\n      y: r.geometry.location.lat,\n      label: r.formatted_address,\n      bounds: [\n        [r.geometry.viewport.southwest.lat, r.geometry.viewport.southwest.lng], // s, w\n        [r.geometry.viewport.northeast.lat, r.geometry.viewport.northeast.lng], // n, e\n      ],\n      raw: r,\n    }));\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  LatLng,\n  ParseArgument,\n  SearchResult,\n} from './provider';\n\nexport interface RequestResult {\n  items: RawResult[];\n}\n\nexport interface RawResult {\n  title: string;\n  id: string;\n  resultType: string;\n  address: {\n    label: string;\n    countryCode: string;\n    countryName: string;\n    state: string;\n    county: string;\n    city: string;\n    district: string;\n    street: string;\n    postalCode: string;\n    houseNumber: string;\n  };\n  position: LatLng;\n  access: LatLng[];\n  categories: { id: string }[];\n  contacts: { [key: string]: { value: string }[] }[];\n  scoring: {\n    queryScore: number;\n    fieldScore: {\n      placeName: number;\n    };\n  };\n}\n\nexport default class HereProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl = 'https://geocode.search.hereapi.com/v1/geocode';\n\n  endpoint({ query }: EndpointArgument): string {\n    const params = typeof query === 'string' ? { q: query } : query;\n    return this.getUrl(this.searchUrl, params);\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return response.data.items.map((r) => ({\n      x: r.position.lng,\n      y: r.position.lat,\n      label: r.address.label,\n      bounds: null,\n      raw: r,\n    }));\n  }\n}\n", "/* eslint-disable @typescript-eslint/camelcase */\nimport AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  ProviderOptions,\n  RequestType,\n  SearchResult,\n} from './provider';\nimport hasShape from '../lib/hasShape';\n\nexport type RequestResult = RawResult[];\n\nexport interface RawResult {\n  place_id: string;\n  license: string;\n  osm_type: string;\n  osm_id: number;\n  boundingbox: [string, string, string, string];\n  lat: string;\n  lon: string;\n  display_name: string;\n  class: string;\n  type: string;\n  importance: number;\n  icon?: string;\n}\n\nexport type OpenStreetMapProviderOptions = {\n  searchUrl?: string;\n  reverseUrl?: string;\n} & ProviderOptions;\n\nexport default class OpenStreetMapProvider extends AbstractProvider<\n  RawResult[],\n  RawResult\n> {\n  searchUrl: string;\n  reverseUrl: string;\n\n  constructor(options: OpenStreetMapProviderOptions = {}) {\n    super(options);\n\n    const host = 'https://nominatim.openstreetmap.org';\n    this.searchUrl = options.searchUrl || `${host}/search`;\n    this.reverseUrl = options.reverseUrl || `${host}/reverse`;\n  }\n\n  endpoint({ query, type }: EndpointArgument): string {\n    const params = typeof query === 'string' ? { q: query } : query;\n    params.format = 'json';\n\n    switch (type) {\n      case RequestType.REVERSE:\n        return this.getUrl(this.reverseUrl, params);\n\n      default:\n        return this.getUrl(this.searchUrl, params);\n    }\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    const records = Array.isArray(response.data)\n      ? response.data\n      : [response.data];\n\n    return records.map((r) => ({\n      x: Number(r.lon),\n      y: Number(r.lat),\n      label: r.display_name,\n      bounds: [\n        [parseFloat(r.boundingbox[0]), parseFloat(r.boundingbox[2])], // s, w\n        [parseFloat(r.boundingbox[1]), parseFloat(r.boundingbox[3])], // n, e\n      ],\n      raw: r,\n    }));\n  }\n}\n", "import OpenStreetMapProvider, {\n  OpenStreetMapProviderOptions,\n} from './openStreetMapProvider';\n\nexport default class LocationIQProvider extends OpenStreetMapProvider {\n  constructor(options: OpenStreetMapProviderOptions) {\n    super({\n      ...options,\n      searchUrl: `https://locationiq.org/v1/search.php`,\n      reverseUrl: `https://locationiq.org/v1/reverse.php`,\n    });\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  LatLng,\n  ParseArgument,\n  SearchArgument,\n  SearchResult,\n} from './provider';\n\nexport interface RequestResult {\n  results: RawResult[];\n}\n\nexport interface RawResult {\n  annotations: {\n    DMS: { lat: string; lng: string };\n    MGRS: string;\n    Maidenhead: string;\n    Mercator: { x: number; y: number };\n    OSM: {\n      edit_url: string;\n      note_url: string;\n      url: string;\n    };\n    UN_M49: {\n      regions: { [key: string]: string };\n      statistical_groupings: string[];\n    };\n    callingcode: number;\n    currency: {\n      alternate_symbols: string[];\n      decimal_mark: string;\n      html_entity: string;\n      iso_code: string;\n      iso_numeric: string;\n      name: string;\n      smallest_denomination: number;\n      subunit: string;\n      subunit_to_unit: number;\n      symbol: string;\n      symbol_first: number;\n      thousands_separator: string;\n    };\n    flag: string;\n    geohash: string;\n    qibla: number;\n    roadinfo: {\n      drive_on: string;\n      road: string;\n      road_type: string;\n      speed_in: string;\n    };\n    sun: {\n      rise: {\n        apparent: number;\n        astronomical: number;\n        civil: number;\n        nautical: number;\n      };\n      set: {\n        apparent: number;\n        astronomical: number;\n        civil: number;\n        nautical: number;\n      };\n    };\n    timezone: {\n      name: string;\n      now_in_dst: number;\n      offset_sec: number;\n      offset_string: string;\n      short_name: string;\n    };\n    what3words: { words: string };\n  };\n  bounds: {\n    northeast: LatLng;\n    southwest: LatLng;\n  };\n  formatted: string;\n  geometry: LatLng;\n}\n\nexport default class OpenCageProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl = 'https://api.opencagedata.com/geocode/v1/json';\n\n  endpoint({ query }: EndpointArgument) {\n    const params = typeof query === 'string' ? { q: query } : query;\n    params.format = 'json';\n\n    return this.getUrl(this.searchUrl, params);\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return response.data.results.map((r) => ({\n      x: r.geometry.lng,\n      y: r.geometry.lat,\n      label: r.formatted,\n      bounds: [\n        [r.bounds.southwest.lat, r.bounds.southwest.lng], // s, w\n        [r.bounds.northeast.lat, r.bounds.northeast.lng], // n, e\n      ],\n      raw: r,\n    }));\n  }\n\n  async search(options: SearchArgument): Promise<SearchResult<RawResult>[]> {\n    // opencage returns a 400 error when query length < 2\n    if (options.query.length < 2) {\n      return [];\n    }\n\n    return super.search(options);\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  ProviderOptions,\n  SearchResult,\n  BoundsTuple,\n} from './provider';\n\nexport type RequestResult = {\n  features: RawResult[];\n};\nexport interface RawResult {\n  center: [string, string];\n  text: string;\n  place_name: string;\n  bbox: [string, string, string, string];\n}\n\nexport type MapBoxProviderOptions = {\n  searchUrl?: string;\n  reverseUrl?: string;\n} & ProviderOptions;\n\nexport default class MapBoxProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl: string;\n\n  constructor(options: MapBoxProviderOptions = {}) {\n    super(options);\n\n    const host = 'https://a.tiles.mapbox.com';\n    this.searchUrl = options.searchUrl || `${host}/v4/geocode/mapbox.places/`;\n  }\n\n  endpoint({ query }: EndpointArgument): string {\n    return this.getUrl(`${this.searchUrl}${query}.json`);\n  }\n\n  parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    const records = Array.isArray(response.data.features)\n      ? response.data.features\n      : [];\n\n    return records.map((r) => {\n      let bounds = null;\n      if (r.bbox) {\n        bounds = [\n          [parseFloat(r.bbox[1]), parseFloat(r.bbox[0])], // s, w\n          [parseFloat(r.bbox[3]), parseFloat(r.bbox[2])], // n, e\n        ] as BoundsTuple;\n      }\n\n      return {\n        x: Number(r.center[0]),\n        y: Number(r.center[1]),\n        label: r.place_name ? r.place_name : r.text,\n        bounds,\n        raw: r,\n      };\n    });\n  }\n}\n", "import AbstractProvider, {\n  EndpointArgument,\n  ParseArgument,\n  ProviderOptions,\n  SearchResult,\n  RequestType,\n} from './provider';\n\nexport interface RequestResult {\n  features: RawResult[];\n  type: string;\n  version: string;\n  attribution: string;\n  licence: string;\n  query: string;\n  limit: string;\n}\n\nexport interface RawResult {\n  properties: {\n    label: string;\n    score: number;\n    importance: number;\n    x: number;\n    y: number;\n    housenumber: string;\n    id: string;\n    type: string;\n    name: string;\n    postcode: string;\n    citycode: string;\n    city: string;\n    context: string;\n    street: string;\n  };\n  type: string;\n  geometry: {\n    coordinates: number[];\n    type: string;\n  };\n}\n\nexport type GeoApiFrProviderOptions = {\n  searchUrl?: string;\n  reverseUrl?: string;\n} & ProviderOptions;\n\nexport default class GeoApiFrProvider extends AbstractProvider<\n  RequestResult,\n  RawResult\n> {\n  searchUrl: string;\n  reverseUrl: string;\n\n  constructor(options: GeoApiFrProviderOptions = {}) {\n    super(options);\n\n    const host = 'https://api-adresse.data.gouv.fr';\n    this.searchUrl = options.searchUrl || `${host}/search`;\n    this.reverseUrl = options.reverseUrl || `${host}/reverse`;\n  }\n\n  endpoint({ query, type }: EndpointArgument) {\n    const params = typeof query === 'string' ? { q: query } : query;\n\n    switch (type) {\n      case RequestType.REVERSE:\n        return this.getUrl(this.reverseUrl, params);\n\n      default:\n        return this.getUrl(this.searchUrl, params);\n    }\n  }\n\n  parse(result: ParseArgument<RequestResult>): SearchResult<RawResult>[] {\n    return result.data.features.map((r) => ({\n      x: r.geometry.coordinates[0],\n      y: r.geometry.coordinates[1],\n      label: r.properties.label,\n      bounds: null,\n      raw: r,\n    }));\n  }\n}\n"],
  "mappings": "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",
  "names": ["createElement", "element", "className", "parent", "attributes", "el", "document", "Object", "keys", "forEach", "key", "type", "indexOf", "substr", "toLowerCase", "addEventListener", "innerHTML", "innerText", "setAttribute", "appendChild", "stopPropagation", "event", "preventDefault", "cx", "t", "classNames", "filter", "Boolean", "join", "trim", "addClassName", "classList", "Array", "isArray", "name", "contains", "add", "removeClassName", "remove", "RequestType", "ENTER_KEY", "ARROW_DOWN_KEY", "ARROW_UP_KEY", "SPECIAL_KEYS", "SearchElement", "e", "handleSubmit", "searchLabel", "o", "this", "container", "form", "autocomplete", "onClick", "onDblClick", "touchStart", "touchEnd", "input", "placeholder", "onInput", "onKeyUp", "_this", "onKeyPress", "onFocus", "onBlur", "focus", "dispatchEvent", "Event", "onSubmit", "_this3", "query", "value", "hasError", "keyCode", "body", "blur", "setQuery", "ResultList", "handleClick", "n", "notFoundMessage", "target", "hasAttribute", "idx", "Number", "getAttribute", "clear", "result", "results", "notfound", "html", "resultlist", "resultItem", "item", "render", "resultFormat", "child", "_this2", "cloneNode", "length", "parentElement", "select", "index", "from", "children", "selected", "count", "lastChild", "removeChild", "defaultOptions", "position", "style", "showMarker", "showPopup", "popupFormat", "label", "marker", "icon", "L", "Default", "draggable", "maxMarkers", "maxSuggestions", "retainZoomLevel", "animateZoom", "messageHideDelay", "zoomLevel", "button", "resetButton", "msgbox", "autoComplete", "autoCompleteDelay", "autoClose", "keepResult", "updateMap", "UNINITIALIZED_ERR", "Control", "options", "initialize", "cb", "wait", "immediate", "timeout", "Error", "provider", "markers", "searchElement", "title", "href", "disableClickPropagation", "text", "clearResults", "resultList", "data", "autoSearch", "args", "clearTimeout", "setTimeout", "selectResult", "onAdd", "map", "addTo", "root", "getContainer", "querySelector", "onRemove", "max", "next", "force", "r", "clearLayers", "search", "slice", "_this5", "showResult", "getLayers", "removeLayer", "addMarker", "centerMap", "fireEvent", "location", "closeResults", "y", "x", "popupLabel", "bindPopup", "addLayer", "openPopup", "on", "_this6", "getLatLng", "resultBounds", "bounds", "toBounds", "isValid", "getBounds", "setView", "getCenter", "getZoom", "animate", "fitBounds", "SearchControl", "LControl", "extend", "AbstractProvider", "getParamString", "params", "set", "encodeURIComponent", "getUrl", "url", "endpoint", "SEARCH", "fetch", "request", "json", "parse", "Provider", "findBestMatchLevelIndex", "vms", "match", "find", "vm", "matchLevel", "getLabel", "locale_names", "_result$locale_names", "_highlightResult", "city", "_result$city", "administrative", "postcode", "_result$postcode", "country", "_result$country", "response", "hits", "_geoloc", "lng", "lat", "raw", "method", "JSON", "stringify", "BingProvider", "q", "jsonp", "searchUrl", "resourceSets", "resources", "point", "coordinates", "address", "formattedAddress", "bbox", "script", "Date", "now", "Promise", "resolve", "window", "s", "EsriProvider", "f", "locations", "feature", "geometry", "extent", "ymin", "xmin", "ymax", "xmax", "PeliasProvider", "host", "REVERSE", "features", "res", "properties", "GeocodeEarthProvider", "GoogleProvider", "formatted_address", "viewport", "southwest", "northeast", "HereProvider", "items", "OpenStreetMapProvider", "reverseUrl", "format", "lon", "display_name", "parseFloat", "boundingbox", "LocationIQProvider", "OpenCageProvider", "formatted", "MapBoxProvider", "center", "place_name", "GeoApiFrProvider"]
}
